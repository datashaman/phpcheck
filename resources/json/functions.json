{
    "generators": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "arguments(callable $f)",
            "name": "Datashaman\\PHPCheck\\arguments",
            "href": "#arguments",
            "shortName": "arguments",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\arguments;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\n\nfunction funcA(int $x, string $s) {\n}\n\nprint repr(generate(arguments('funcA'))) . PHP_EOL;\n\n\/**\n * @param string $s {@gen faker(\"username\")}\n *\/\nfunction funcB(string $s) {\n}\n\nprint repr(generate(arguments('funcB'))) . PHP_EOL;\n",
            "output": "[-769525531767946240, \"\\xf3\\xa9\\xac\\x87\\xe6\\x92\\x9d\\xf3\\x89\\x85\\xa0\\xe4\\xb2\\x89\\xf3\\xaf\\x81\\x8e\\xf0\\xaf\\xb3\\xb5\\xf3\\x89\\xa9\\xa4\\xf0\\x99\\x91\\x8d\\xf0\\xb4\\x81\\x8b\\xf1\\x91\\x96\\x9b\\xe1\\x81\\xb0\\xf3\\x8f\\xbe\\xbe\\xf2\\xb6\\xb9\\xab\\xf1...]\n[\"hcummerata\"]\n",
            "return": null,
            "summary": "<p>Generate an array of arguments for the callable function.<\/p>"
        },
        {
            "arguments": [],
            "file": "generators",
            "header": "arrays()",
            "name": "Datashaman\\PHPCheck\\arrays",
            "href": "#arrays",
            "shortName": "arrays",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\arrays;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\n\nprint repr(generate(arrays())) . PHP_EOL;\n",
            "output": "[[\"\\xf2\\xb3\\xbf\\x86\\xf1\\xbc\\x8b\\x85\\xf1\\xae\\x9e\\xa3\\xf0\\xac\\xbc\\xb0\\xf0\\xbf\\x92\\xb2\\xf2\\x88\\x8a\\xa3\\xf0\\xba\\x8b\\x9f\\xf2\\xb0\\xae\\xa0\\xf3\\xa5\\xa1\\x86\\xf0\\xa1\\x8c\\xa0\\xf1\\x83\\x8f\\x9a\\xf2\\x8a\\xb5\\x95\\xf0\\xb0..., \"\\xf0\\xae\\xbc\\x89\\xf1\\x8b\\xa4\\xa6\\xf2\\xa0\\x93\\x8d\\xf1\\xa1\\xb9\\xac\\xf3\\xae\\x87\\xaf\\xf0\\xa8\\x9d\\xb6\\xf0\\xbe\\x8b\\xa3\\xf2\\xa0\\xa1\\xa0\\xf1\\x89\\x84\\xa4\\xf2\\xa9\\xbb\\x99\\xf1\\x9d\\x93\\x95\", \"\\xf1\\xb0\\x9a\\xae\\xf3\\xa8\\x91\\xa7\\xf3\\x82\\x81\\xa6\\xf0\\xb0\\x9a\\x9a\\xf0\\xb2\\x84\\xa7\\xf2\\x96\\xb6\\x9d\\xf0\\x9c\\xa2\\xb6\\xf1\\x9c\\xa4\\xb1\\xf2\\xa7\\xb6\\xa3\\xf3\\x90\\xaa\\x95\\xf1\\x8d\\xbb\\x96\\xe7\\x9b\\xb3\\xf2\\xb7\\x89..., \"\", \"\\xf1\\x8f\\x91\\x8e\\xf3\\x8a\\xaa\\xbe\\xe6\\xbc\\x88\\xf1\\x8a\\x93\\x9c\\xf2\\xb8\\x95\\x9e\\xf1\\xb6\\xa2\\xba\\xf0\\xb9\\x92\\xb0\\xf3\\xa0\\xbc\\xbc\\xf2\\x98\\x93\\xa6\\xf3\\x92\\xa8\\xa3\\xf0\\x9c\\x93\\xa1\\xe7\\xb0\\xb1\\xf0\\xae\\xb5\\xab..., \"\\xf2\\xbb\\xab\\xaa\\xf3\\x93\\x8e\\x99\", \"\\xf2\\xa6\\xb0\\xa7\\xf2\\x83\\xa9\\xb5\", \"\\xf3\\xaa\\xa3\\x98\\xf2\\xa2\\x9f\\x9e\\xe1\\xaf\\xb4\\xf2\\x80\\xa3\\x89\\xf1\\xb1\\xb7\\x82\\xf2\\xa6\\xb0\\xad\\xf3\\x97\\xa4\\x88\\xf0\\x91\\x8b\\x88\\xf2\\xb9\\x92\\xb1\\xf3\\x8d\\xbb\\x92\\xf2\\x91\\xa4\\x9c\\xf0\\xb2\\xb1\\x9e\\xec\\xb4\\x98..., \"\\xf2\\xb6\\xb7\\x80\\xf2\\xbf\\x9f\\x80\\xe5\\x92\\x9a\\xf0\\xb8\\x92\\xac\\xf0\\xb6\\xba\\x80\\xf3\\xa9\\x84\\xbe\\xf2\\x9c\\xa9\\xac\\xf3\\x89\\x91\\x83\\xf2\\x89\\xa3\\xbb\\xf1\\x8f\\xa2\\xbe\\xf3\\x84\\x87\\xbd\\xf1\\xa9\\xb0\\xb4\\xf1\\xb4\\x89...], true, -6851271879161479168, 9697-06-01 00:00:00 GMT+0000, 6752-03-02 06:33:36 GMT+0000, -6966997515230040064, \"\\xe0\\xac\\x84\\xf2\\xb1\\xa6\\xa7\\xf1\\x81\\xa7\\x94\\xf0\\xb0\\x86\\x92\\xf3\\x81\\x87\\x9e\\xf1\\x8a\\xa1\\xbe\\xf2\\xb4\\xa9\\x80\\xf0\\xa4\\x8c\\x9d\\xf3\\x9a\\x8f\\x9c\\xf1\\x85\\x86\\x87\\xf3\\x8e\\x85\\xa9\\xf2\\x9b\\xab\\xaf\\xf1\\x9f\\x8d...]\n",
            "return": null,
            "summary": "<p>Generate an array of mixed values.<\/p>"
        },
        {
            "arguments": [],
            "file": "generators",
            "header": "ascii()",
            "name": "Datashaman\\PHPCheck\\ascii",
            "href": "#ascii",
            "shortName": "ascii",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\ascii;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\strings;\n\n\/\/ Generate an ASCII character.\nprint repr(sample(ascii())) . PHP_EOL;\n\n\/\/ Generate an ASCII string.\nprint repr(sample(strings(ascii()))) . PHP_EOL;\n",
            "output": "[\"I\", \"u\", \"H\", \"R\", \"!\", \"v\", \"A\", \"^\", \"l\", \"`\", \"S\"]\n[\"\", \",\", \"y2kz\", \"sQs<\", \"*<\", \"-&!qu\", \"A+Shfs%\", \"m!\", \"@2<Sw4\", \"\", \"<rF\\\\[8=e,U[}9c1'p\"]\n",
            "return": null,
            "summary": "<p>Generate an ASCII character.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "50",
                    "description": null,
                    "name": "chanceOfGettingTrue",
                    "type": "int",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "booleans(int $chanceOfGettingTrue = 50)",
            "name": "Datashaman\\PHPCheck\\booleans",
            "href": "#booleans",
            "shortName": "booleans",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\booleans;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\n\n\/\/ Generate a boolean value with 50% chance true.\nprint repr(generate(booleans())) . PHP_EOL;\n\n\/\/ Generate a boolean value with 75% chance true.\nprint repr(generate(booleans(75))) . PHP_EOL;\n",
            "output": "true\ntrue\n",
            "return": null,
            "summary": "<p>Generate a boolean value.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "null",
                    "description": "the minimum character to be generated",
                    "name": "minChar",
                    "type": "null|int|string",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": "the maximum character to be generated",
                    "name": "maxChar",
                    "type": "null|int|string",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "characters($minChar = null, $maxChar = null)",
            "name": "Datashaman\\PHPCheck\\characters",
            "href": "#characters",
            "shortName": "characters",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\characters;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(characters())) . PHP_EOL;\n",
            "output": "[\"\\xf1\\x90\\x8f\\x8b\", \"\\xf1\\xb7\\x82\\x8f\", \"\\xf0\\xb4\\xb7\\xb7\", \"\\xf2\\x9d\\x95\\x80\", \"\\xf2\\xa9\\xa5\\x87\", \"\\xf1\\xb9\\x99\\x96\", \"\\xf1\\xa0\\xba\\x86\", \"\\xf1\\xbe\\x8f\\x82\", \"\\xf3\\xaa\\xa0\\x97\", \"\\xf0\\xb5\\x87\\x9f\", \"\\xf3\\x84\\xa4\\x97\"]\n",
            "return": null,
            "summary": "<p>Generate a character. The value is generated from all Unicode characters except control characters, surrogates and private ranges.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "PHP_INT_MIN",
                    "description": "The minimum element to generate. Can be an integer, float or a one character string. If it's an array, it must be a <code>[min, max]<\/code> pair.",
                    "name": "min",
                    "type": "array|float|int|string",
                    "variadic": false
                },
                {
                    "default": "PHP_INT_MAX",
                    "description": "The maximum element to generate. Can be an integer, float or a one character string.",
                    "name": "max",
                    "type": "float|int|string",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "choose($min = PHP_INT_MIN, $max = PHP_INT_MAX)",
            "name": "Datashaman\\PHPCheck\\choose",
            "href": "#choose",
            "shortName": "choose",
            "description": "<p>This is another paragraph.<\/p>",
            "example": "use function Datashaman\\PHPCheck\\choose;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(choose(0, 10))) . PHP_EOL;\nprint repr(sample(choose(\"a\", \"e\"))) . PHP_EOL;\n",
            "output": "[9, 2, 7, 4, 4, 4, 2, 6, 10, 1, 7]\n[\"a\", \"e\", \"e\", \"e\", \"e\", \"e\", \"c\", \"d\", \"b\", \"c\", \"c\"]\n",
            "return": null,
            "summary": "<p>Generates a random element in the given inclusive range.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "The type to be generated. Can be one of: <code>float<\/code>, <code>int<\/code>, <code>string<\/code>.",
                    "name": "type",
                    "type": "string",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "chooseAny(string $type)",
            "name": "Datashaman\\PHPCheck\\chooseAny",
            "href": "#chooseAny",
            "shortName": "chooseAny",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\chooseAny;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(chooseAny('float'))) . PHP_EOL;\n",
            "output": "[1.1123602006656E+308.0, 1.4418494608372E+308.0, 1.7510605629181E+308.0, 1.0735398380909E+308.0, 1.363992803264E+308.0, 2.0122570101885E+307.0, 2.9314515231497E+307.0, 1.5285448028899E+308.0, 6.7024870815118E+307.0, 1.3601662308871E+308.0, 1.708809708612E+308.0]\n",
            "return": null,
            "summary": "<p>Generate a value by type.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "null",
                    "description": "The minimum date to be generated. If it's an array, it must be a <code>[min, max]<\/code> pair.",
                    "name": "min",
                    "type": "array|\\DateTime|int|string",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": "the maximum date to be generated",
                    "name": "max",
                    "type": "\\DateTime|int|string",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "dates($min = null, $max = null)",
            "name": "Datashaman\\PHPCheck\\dates",
            "href": "#dates",
            "shortName": "dates",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\dates;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(dates('2000-01-01', '2300-01-01'))) . PHP_EOL;\n",
            "output": "[2111-08-23 00:00:00 GMT+0000, 2061-12-26 00:00:00 GMT+0000, 2262-01-12 00:00:00 GMT+0000, 2013-07-13 00:00:00 GMT+0000, 2238-06-23 00:00:00 GMT+0000, 2175-09-04 00:00:00 GMT+0000, 2006-02-25 00:00:00 GMT+0000, 2036-12-26 00:00:00 GMT+0000, 2102-10-21 00:00:00 GMT+0000, 2280-12-09 00:00:00 GMT+0000, 2113-08-07 00:00:00 GMT+0000]\n",
            "return": null,
            "summary": "<p>Generate dates.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "null",
                    "description": "The minimum datetime to be generated. If it's an array, it must a <code>[min, max]<\/code> pair.",
                    "name": "min",
                    "type": "null|array|\\DateTime|string",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": "the maximum datetime to be generated",
                    "name": "max",
                    "type": "null|\\DateTime|string",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": "Optional timezones generator. Default is naive datetimes.",
                    "name": "timezones",
                    "type": "null|\\Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "datetimes($min = null, $max = null, $timezones = null)",
            "name": "Datashaman\\PHPCheck\\datetimes",
            "href": "#datetimes",
            "shortName": "datetimes",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\datetimes;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\timezones;\n\nprint repr(sample(datetimes())) . PHP_EOL;\n\nprint repr(sample(datetimes('2000-01-01', '2100-01-01', timezones()))) . PHP_EOL;\n",
            "output": "[8089-06-07 20:03:09 GMT+0000, 3801-02-10 00:05:25 GMT+0000, 2385-03-25 08:32:21 GMT+0000, 8618-06-14 07:01:27 GMT+0000, 3834-08-23 15:16:31 GMT+0000, 0788-06-29 01:07:35 GMT+0000, 2129-08-05 21:58:38 GMT+0000, 9111-01-28 06:56:46 GMT+0000, 1013-04-27 23:20:46 GMT+0000, 1775-04-11 13:39:53 GMT+0000, 6911-07-15 05:18:30 GMT+0000]\n[2056-02-06 00:01:24 +0430, 2040-11-10 16:13:54 +07, 2078-07-21 10:34:36 AKST, 2079-09-20 10:53:26 EET, 2028-06-08 13:54:30 -04, 2044-06-29 08:26:15 -04, 2020-09-08 06:52:33 CEST, 2054-07-30 12:56:35 CET, 2064-03-20 10:03:56 EET, 2024-01-16 02:13:03 +03, 2076-05-21 05:25:52 EET]\n",
            "return": null,
            "summary": "<p>Generate datetimes, optionally with generated timezones.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the array to be generated from",
                    "name": "array",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "elements(array $array)",
            "name": "Datashaman\\PHPCheck\\elements",
            "href": "#elements",
            "shortName": "elements",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\elements;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\listOf1;\n\nprint repr(generate(listOf1(elements(['abc', 123, 'u&me'])))) . PHP_EOL;\n",
            "output": "[\"u&me\", 123, \"abc\", 123, \"abc\", \"abc\", 123, 123, 123, 123, 123, \"u&me\", <+2>]\n",
            "return": null,
            "summary": "<p>Generates one of the given values. The input list must be non-empty.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "generators",
            "header": "faker(...$args)",
            "name": "Datashaman\\PHPCheck\\faker",
            "href": "#faker",
            "shortName": "faker",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\faker;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\n\nprint repr(generate(faker(\"creditCardDetails\"))) . PHP_EOL;\nprint repr(generate(faker(\"email\"))) . PHP_EOL;\nprint repr(generate(faker(\"imageUrl\", 400, 300, \"cats\"))) . PHP_EOL;\n",
            "output": "[\"type\" => \"MasterCard\", \"number\" => \"2691965862081134\", \"name\" => \"Thaddeus Spencer\", \"expirationDate\" => \"03\/20\"]\n\"marisol.mohr@hotmail.com\"\n\"https:\/\/lorempixel.com\/400\/300\/cats\/?11617\"\n",
            "return": null,
            "summary": "<p>Generates a value from the Faker factory.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "PHP_FLOAT_MIN",
                    "description": "the minimum float value to generate",
                    "name": "min",
                    "type": "float",
                    "variadic": false
                },
                {
                    "default": "PHP_FLOAT_MAX",
                    "description": "the maximum float value to generate",
                    "name": "max",
                    "type": "float",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "floats(float $min = PHP_FLOAT_MIN, float $max = PHP_FLOAT_MAX)",
            "name": "Datashaman\\PHPCheck\\floats",
            "href": "#floats",
            "shortName": "floats",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\floats;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\n\nprint repr(generate(floats(-1000, 1000))) . PHP_EOL;\n",
            "output": "-707.63801583445\n",
            "return": null,
            "summary": "<p>Generate floats optionally within a specific range.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "a weighted list consisting of pairs of <code>[weight, generator]<\/code>",
                    "name": "frequencies",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "frequency(array $frequencies)",
            "name": "Datashaman\\PHPCheck\\frequency",
            "href": "#frequency",
            "shortName": "frequency",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\faker;\nuse function Datashaman\\PHPCheck\\frequency;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(frequency([\n    [1, faker(\"email\")],\n    [4, faker(\"lastName\")],\n]))) . PHP_EOL;\n",
            "output": "[\"Walter\", \"Wehner\", \"lakin.cale@yahoo.com\", \"jamal.morar@yahoo.com\", \"Cronin\", \"Pacocha\", \"carolina.kuvalis@gmail.com\", \"Price\", \"Cummings\", \"Bode\", \"Reinger\"]\n",
            "return": null,
            "summary": "<p>Chooses one of the given generators, with a weighted random distribution. The input list must be non-empty.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the array containing the elements to be selected",
                    "name": "array",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "growingElements(array $array)",
            "name": "Datashaman\\PHPCheck\\growingElements",
            "href": "#growingElements",
            "shortName": "growingElements",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\growingElements;\nuse function Datashaman\\PHPCheck\\listOf;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(listOf(growingElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])))) . PHP_EOL;\n",
            "output": "[[], [10], [11, 16], [1, 11, 10, 9, 8], [11, 15, 6, 10, 16, 5, 14], [9, 10, 11, 9, 16, 3, 3, 3, 16], [4, 12], [7, 13, 12], [9, 14, 9, 9, 12, 15, 15, 16, 16, 10], [1, 10, 3, 1, 7, 10, 1, 4, 7, 12], [12, 15, 11, 15, 7, 1, 16, 6, 12, 4, 2, 2, <+7>]]\n",
            "return": null,
            "summary": "<p>Takes a list of elements of increasing size, and chooses among an initial segment of the list. The size of this initial segment increases with the size parameter. The input list must be non-empty.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "[[-9223372036854775807-1, 9223372036854775807]]",
                    "description": "an array of intervals to include in selecting the value",
                    "name": "include",
                    "type": "array",
                    "variadic": false
                },
                {
                    "default": "[]",
                    "description": "an array of intervals to exclude from the selection",
                    "name": "exclude",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "intervals(array $include = [[-9223372036854775807-1, 9223372036854775807]], array $exclude = [])",
            "name": "Datashaman\\PHPCheck\\intervals",
            "href": "#intervals",
            "shortName": "intervals",
            "description": "<p>Intervals are defined as a list of <code>[min, max]<\/code> pairs, for example: <code>[[1, 3], [4, 10], [11, 40]]<\/code>.<\/p>",
            "example": "use function Datashaman\\PHPCheck\\intervals;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(intervals([[1, 10]], [[1, 5]]))) . PHP_EOL;\n",
            "output": "[8, 9, 6, 8, 6, 6, 6, 9, 7, 6, 8]\n",
            "return": null,
            "summary": "<p>Generate an element within a set of intervals, and excluding another set of intervals.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the generator that creates the values",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "listOf(\\Generator $gen)",
            "name": "Datashaman\\PHPCheck\\listOf",
            "href": "#listOf",
            "shortName": "listOf",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\faker;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\listOf;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\resize;\nuse function Datashaman\\PHPCheck\\strings;\n\nvar_dump(generate(listOf(strings(faker(\"emoji\")))));\n\nprint repr(generate(resize(2, listOf(faker(\"ipv4\"))))) . PHP_EOL;\n",
            "output": "array(1) {\n  [0]=>\n  string(64) \"\ud83d\ude20\ud83d\ude04\ud83d\ude0f\ud83d\ude34\ud83d\ude2d\ud83d\ude21\ud83d\ude2a\ud83d\ude1b\ud83d\ude15\ud83d\ude0c\ud83d\ude0d\ud83d\ude13\ud83d\ude12\ud83d\ude09\ud83d\ude32\ud83d\ude1d\"\n}\n[]\n",
            "return": null,
            "summary": "<p>Generates a list of random length. The maximum length depends on the size parameter.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the generator that creates the values",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "listOf1(\\Generator $gen)",
            "name": "Datashaman\\PHPCheck\\listOf1",
            "href": "#listOf1",
            "shortName": "listOf1",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\faker;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\listOf1;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\resize;\n\nprint repr(generate(listOf1(faker(\"creditCardNumber\")))) . PHP_EOL;\n\nvar_dump(generate(resize(2, listOf1(faker(\"emoji\")))));\n",
            "output": "[\"4532312093444\", \"5250781266951988\", \"2631456648046776\", \"2221077458986137\", \"4539902869647064\", \"4532744758622718\", \"374295320031341\", \"5206956768541496\", \"5235664932332058\", \"373322629974657\", \"370769632035194\", \"5312483523294338\", <+11>]\narray(2) {\n  [0]=>\n  string(4) \"\ud83d\ude2a\"\n  [1]=>\n  string(4) \"\ud83d\ude27\"\n}\n",
            "return": null,
            "summary": "<p>Generates a non-empty list of random length. The maximum length depends on the size parameter.<\/p>"
        },
        {
            "arguments": [],
            "file": "generators",
            "header": "mixed()",
            "name": "Datashaman\\PHPCheck\\mixed",
            "href": "#mixed",
            "shortName": "mixed",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\mixed;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(mixed())) . PHP_EOL;\n",
            "output": "[[\"\\xf2\\x8f\\xb7\\x99\\xf0\\x92\\xb3\\xab\\xf1\\xa6\\x9a\\xbf\\xf1\\x87\\xa0\\x81\\xf2\\xa3\\x8d\\xa4\\xf2\\xaa\\xad\\x9c\\xf1\\x8f\\x8c\\x9e\\xf2\\x8b\\x89\\xb7\\xf2\\xb2\\x9c\\x9e\\xf2\\xb7\\x99\\xba\\xf1\\xad\\xb3\\xad\\xf1\\xbe\\x90\\xb6\\xf2\\xa2..., \"\\xf2\\xaa\\x80\\x84\", \"\\xf0\\x96\\xa4\\xaa\\xf3\\x88\\xa1\\xbe\\xf3\\x9f\\xa4\\x8f\\xe8\\x98\\xbc\\xf1\\xbb\\xb5\\xa6\\xf2\\xbf\\xab\\x86\\xf0\\xad\\xa9\\x8c\\xf2\\x89\\x90\\x8a\\xf1\\x91\\xbc\\x8f\\xf3\\xa3\\xa7\\xb3\\xe1\\x93\\xb7\\xf2\\x87\\xb2\\xa3\\xf1\\x9b\\x87\\xb3..., \"\\xec\\x82\\x8e\\xf3\\xaa\\xad\\x99\\xf2\\x9d\\xa8\\x92\\xf1\\xa3\\xa5\\x95\\xf1\\x80\\x93\\x9d\\xf3\\x97\\x92\\x94\\xf2\\xa3\\x80\\xbc\\xf3\\x8a\\x88\\xb7\\xf2\\xbf\\x89\\xa3\\xf0\\xb9\\xbe\\x97\\xf0\\xb2\\x9e\\x9d\\xf3\\x83\\x82\\x83\\xf2\\xbf\\xb0..., \"\\xf1\\xa3\\xae\\x94\\xf2\\xa9\\xa1\\x86\\xf1\\xbc\\xaf\\xb7\\xf1\\xab\\xac\\x8f\\xf2\\x82\\x8e\\xa7\\xe8\\x90\\xb5\", \"\\xf2\\x8b\\x9e\\xad\\xe0\\xb5\\xac\\xf1\\x89\\x81\\x88\\xf1\\xad\\xb1\\xb4\\xf1\\xa0\\x98\\x9e\\xea\\xb9\\x97\\xf1\\xb6\\x87\\x81\\xf0\\xb9\\xa1\\xbe\\xf2\\x9e\\xb6\\x9e\\xf2\\x9d\\xb7\\x8f\\xf2\\xb2\\xbd\\xa9\\xf3\\xaa\\xb5\\xa9\\xf0\\xb6\\xab\\x8a..., \"\\xf2\\x91\\xac\\xb0\\xf0\\xae\\x89\\xa6\\xf1\\x86\\xb6\\xb4\\xf3\\x98\\x90\\xad\\xf3\\x9d\\x8e\\x9e\\xf1\\x95\\x99\\x9d\\xf2\\xb9\\xaf\\xb9\\xf3\\x9c\\x9d\\xb2\\xf2\\x8c\\x85\\xa8\\xf3\\x93\\xb1\\x9c\\xf2\\x93\\x98\\xaa\\xf1\\x9a\\x98\\x86\\xf2\\xa6..., \"\\xf1\\xaf\\x87\\xb1\\xf0\\xb5\\x92\\x96\\xf1\\x8d\\x87\\x93\\xf0\\xb1\\xb8\\x85\\xf1\\x83\\x94\\x8d\\xf1\\x83\\x88\\xa5\\xf3\\x96\\xb8\\x9a\\xf0\\xa7\\xa0\\xae\\xf2\\x98\\x90\\x89\\xf1\\x94\\x90\\xb1\\xe9\\x85\\x9f\\xf1\\x9b\\xba\\x97\\xf1\\x97\\x8d..., \"\\xf2\\xb9\\xb6\\x9e\\xf0\\xa3\\x90\\x8f\\xf3\\xac\\x82\\xa5\\xf2\\x9c\\xb3\\xbc\\xf0\\xba\\x91\\xa7\\xf0\\x98\\x97\\x89\\xf3\\xa1\\xbf\\xa5\\xf3\\xaa\\xb9\\xae\\xf3\\x84\\xb0\\x91\\xf2\\xab\\xac\\xb3\\xf1\\x9d\\xb6\\xbd\\xf1\\xb3\\x8b\\x91\\xf3\\xa4..., \"\\xf1\\xb3\\xa3\\xbc\\xf2\\xa2\\x84\\x96\\xf0\\xb9\\x81\\xb1\\xf1\\xa9\\xa8\\xa7\\xf3\\xa7\\x98\\x98\\xf0\\xb2\\xa0\\x95\\xf2\\x99\\xab\\x83\\xf1\\xb4\\x9a\\x87\\xf3\\x80\\x97\\xa6\\xf0\\x92\\xba\\xb3\\xf3\\x84\\xac\\xbf\\xf0\\xa8\\xac\\x85\\xf1\\x8a..., \"\\xf1\\x86\\xac\\x95\\xf0\\xbb\\x91\\xb6\\xf1\\xb6\\xbe\\x9c\\xf3\\xa3\\x99\\x93\\xf2\\x89\\x92\\x8a\", \"\\xf1\\xb1\\x95\\x9d\\xf1\\xb2\\x8c\\xbb\\xf1\\x90\\x97\\xb8\\xf2\\xb2\\xa9\\xa3\\xef\\xb2\\x9d\\xf0\\xbc\\x99\\xb5\\xf2\\x81\\x8a\\x97\\xe6\\x8e\\xae\\xf2\\x91\\xab\\x9a\\xc2\\x96\\xf1\\x8f\\xb4\\x99\\xf3\\xac\\x80\\x8d\\xf0\\xa1\\xa6\\xbd\\xf1\\xaf..., <+5>], [\"\\xf1\\xb7\\xb7\\x9a\\xf1\\x8a\\x83\\x9d\\xf1\\xaf\\x89\\xa6\\xed\\x86\\x85\\xf3\\x89\\xb8\\xaa\\xf1\\xa0\\x8e\\x80\\xf0\\xb8\\x85\\x94\\xf1\\xad\\x8c\\x9f\\xf0\\xad\\xb4\\xab\\xf0\\x9a\\xb1\\xa1\\xf3\\x8d\\x8a\\xb8\", \"\\xf3\\x88\\x9a\\xa8\\xf0\\xad\\x87\\xb0\\xf1\\x92\\xb5\\xb4\\xf1\\x9d\\xba\\x8e\\xf1\\x89\\xa6\\xab\\xf0\\xa9\\x84\\x84\\xf0\\xb2\\xbc\\xae\\xf3\\x89\\xb0\\x91\\xf3\\x91\\x8a\\x90\\xf0\\xb9\\xa9\\xbd\\xf1\\x82\\x8e\\x88\\xf1\\x93\\xa1\\xb4\\xf1\\xa3..., \"\\xf1\\xb8\\xbf\\xba\\xf0\\x9a\\xa1\\xac\\xf1\\xb8\\xb8\\x9d\\xe4\\xba\\x83\\xf3\\x90\\x8c\\x9f\\xe9\\xb7\\xbb\\xf1\\xa7\\x87\\xb3\\xf2\\x9f\\x87\\xa4\\xf3\\x84\\x9f\\x94\\xf3\\xa3\\xa0\\xbd\\xf2\\x8e\\x81\\x8d\\xf1\\xb3\\x9d\\xa3\\xf2\\xa8\\xaa\\x8a..., \"\\xf2\\xb6\\x83\\x97\\xf2\\x89\\x80\\x99\\xf2\\xb2\\x90\\xab\\xf1\\xb6\\xbc\\x80\\xf2\\x83\\x96\\xac\\xf2\\xaa\\xad\\x86\\xf0\\x96\\xbb\\xb7\\xf3\\x95\\xbf\\x95\\xf1\\xbf\\x84\\xa5\\xf3\\x8f\\xaf\\x8c\\xe6\\x91\\x82\\xf1\\xaf\\xa6\\x93\\xf3\\x8a\\xb9..., \"\\xf2\\xa1\\xb0\\xb2\\xf0\\xb2\\xa6\\xbb\\xf1\\x8a\\xb9\\xbb\\xf1\\xa2\\xa4\\x97\\xf2\\x88\\x9f\\xab\\xf2\\x9d\\x99\\xaa\\xf3\\x99\\xbb\\x95\\xf1\\xbd\\x9c\\xab\\xf0\\xae\\xa3\\x8b\\xf1\\x9f\\x81\\xb0\\xf1\\x87\\x8f\\xb7\\xf3\\x87\\x97\\xb3\\xf0\\xb1..., \"\\xf1\\x9b\\xaa\\xae\\xf0\\xa9\\x81\\x9c\\xf1\\xa6\\xb9\\xba\\xf2\\xaa\\xaf\\xb9\\xf2\\x89\\xb9\\x92\\xf3\\xa0\\xb4\\xae\\xf3\\x8a\\x81\\xbc\\xf3\\xac\\x81\\x84\\xf2\\x88\\xb6\\xb0\\xf1\\xb8\\x83\\x93\\xf1\\x8b\\xa0\\x98\\xf1\\x92\\xb1\\x97\\xf1\\xa8..., \"\\xf0\\xba\\x9d\\x88\\xf0\\xa7\\x93\\x91\\xf1\\x91\\xac\\xb6\\xf0\\x96\\x89\\x91\\xf1\\x9a\\xb2\\x8b\\xf2\\x84\\xba\\x96\\xf3\\x98\\x93\\xa8\\xf2\\xa9\\x86\\x8a\\xf3\\xa7\\x84\\x8f\\xf2\\xaf\\xa9\\x83\\xf0\\xb8\\xbb\\x99\\xf1\\x9c\\x92\\xa8\\xf3\\x91..., \"\\xf3\\x87\\xbc\\x97\\xe8\\x99\\x80\\xf1\\x84\\x91\\xa0\\xf0\\xba\\xac\\xb3\\xf0\\xb8\\xa3\\x82\\xf2\\x93\\xa8\\xa5\\xf3\\xa3\\xb3\\x9c\\xec\\x9e\\x91\\xf2\\xa6\\xb1\\x81\\xf1\\x84\\xa4\\xa8\\xeb\\x9a\\xa5\\xf2\\x98\\x8b\\x9f\\xf3\\x97\\x9d\\xb6\\xf2...], [\"\\xe2\\xbb\\xaa\\xf3\\x8c\\xae\\x8f\\xf0\\x9b\\xa9\\x85\\xf2\\xba\\x8b\\x82\\xf3\\xab\\x98\\xa4\\xf1\\xb8\\x91\\xab\\xf3\\xae\\xb7\\xa9\\xf2\\xa9\\xbc\\xbc\\xf1\\x92\\x80\\x95\\xf2\\xbe\\x8e\\xa3\\xf0\\x92\\x85\\xb2\\xef\\xa7\\x80\\xf3\\xaf\\xab\\x83..., \"\\xf2\\x92\\xb1\\xab\\xf2\\xbc\\xa5\\xa6\\xf0\\xaa\\x9e\\x94\\xf0\\x99\\x8d\\x9a\\xf2\\xbc\\xa8\\x94\\xf0\\xa6\\xbd\\x89\\xf0\\xa9\\xba\\xad\\xf1\\xb1\\x9a\\x9e\\xf3\\xa9\\x99\\x94\\xf0\\xb6\\x98\\x8e\\xf0\\xba\\xb3\\xb8\\xf1\\xb7\\xbe\\xa2\\xf0\\xaa..., \"\\xf2\\xbb\\xbc\\xa5\\xf3\\xa7\\x9f\\x95\\xf2\\x93\\x98\\xac\\xf2\\x96\\xab\\x9a\\xe1\\x9b\\xb7\\xf2\\x86\\x9c\\x93\\xf3\\x88\\x8f\\x8f\\xf0\\xbd\\xb7\\xbd\\xf2\\x9c\\x8b\\x9d\\xf0\\xb3\\x81\\xb3\\xf0\\xac\\xbb\\xbf\\xf0\\xb8\\x97\\xbb\\xf0\\x9a\\x95..., \"\\xf3\\x92\\x9e\\xa0\\xf2\\x83\\x89\\xb8\\xf1\\x9b\\x91\\x9b\", \"\\xf2\\x96\\x81\\xa5\\xf3\\x82\\x9b\\xa2\\xf0\\xa7\\x95\\xa4\\xf0\\xb8\\xa1\\xa7\\xf1\\xa5\\x98\\x9b\\xf0\\x97\\x81\\xa6\\xf0\\x95\\xad\\x91\", \"\\xf3\\xa9\\xb6\\x9f\\xeb\\x9b\\xba\\xf2\\xb6\\x80\\xa0\", \"\\xf2\\xbb\\xb8\\xb6\", \"\\xf0\\x9d\\x9c\\x9b\\xf1\\x94\\x90\\x9f\\xf1\\x89\\x9a\\x9e\\xf2\\x91\\x9f\\xb7\", \"\\xe9\\xae\\xb7\\xf2\\xa7\\xa2\\xae\\xf0\\x9b\\x96\\x9a\\xf3\\x83\\x8a\\x80\\xf2\\xb1\\xb3\\x8d\\xf3\\x99\\xaa\\xaf\\xf3\\xad\\xb6\\xa5\\xf2\\xab\\xa8\\x83\\xf2\\xa7\\x86\\xaa\\xf2\\xb7\\xa6\\xb2\\xf0\\xb7\\x96\\x90\\xe3\\x96\\x8b\\xf1\\x84\\x82\\xb3..., \"\\xf3\\x9b\\xa4\\x82\\xf0\\xad\\xa2\\xaf\\xf1\\x84\\xae\\xa9\\xf3\\x8b\\xb9\\x9d\\xf1\\x8b\\xa6\\x85\\xf3\\xae\\xae\\xa8\\xf0\\xbc\\x91\\xb7\\xf2\\xa4\\x9a\\xaa\\xf1\\x98\\x87\\xbf\\xf3\\x96\\xb0\\x8e\\xf0\\xb8\\xa1\\xa8\\xf3\\xa5\\xaa\\x88\\xf0\\x9a..., \"\\xf2\\x97\\x9d\\x98\\xf1\\xba\\x9d\\x91\\xf1\\x86\\x9e\\xb7\\xf1\\x87\\xa4\\xa6\\xf1\\x93\\x83\\xbd\\xf0\\x90\\x84\\x9e\\xf2\\xb7\\xb3\\xbc\\xf1\\x98\\x86\\x97\\xe5\\xb7\\xb0\\xe0\\xaf\\xb2\\xf3\\xa0\\xa1\\xae\\xf3\\x99\\xae\\x96\", \"\\xf3\\x81\\xb3\\xb7\\xf0\\xbd\\x99\\x9f\\xf3\\xac\\x81\\x98\\xf1\\x9b\\xa4\\xa9\\xf0\\x95\\xb4\\xb6\\xf0\\xbf\\xb6\\x88\\xf1\\x82\\x82\\x80\\xf0\\x9f\\xb9\\xab\\xf2\\xb6\\xab\\xa7\\xf0\\x95\\xaf\\x81\\xe6\\x98\\xaa\\xf3\\x8c\\x8f\\xad\\xf3\\x87\\xb3..., <+14>], [-304760458120511488, -6835319189444481024, -8365478726555287552, -6637811626302910464, -1263956459099914240, -2008330553769410560], \"\\xf1\\x85\\x87\\xbc\\xf2\\x8c\\x87\\x83\\xf0\\xb8\\x9f\\xb6\\xf2\\xb8\\x8b\\x81\\xe9\\xa6\\xae\\xf0\\xb3\\xb8\\xbd\\xf3\\x8b\\x9d\\xa2\\xe2\\x8e\\x8d\\xf2\\xa1\\x85\\xb6\\xf2\\x89\\x88\\xb0\\xf1\\xa1\\x8b\\xb7\\xf1\\x99\\xb6\\x92\\xf3\\x9e\\x83\\x8b..., [\"\\xf2\\xa1\\xbd\\xa2\\xf1\\x9e\\x8f\\xaa\\xf3\\x8b\\xb7\\xa4\\xf1\\x81\\xbd\\x9b\\xf0\\x90\\x93\\xb9\\xf3\\x8c\\xaa\\x90\\xed\\x9f\\xb6\\xf1\\xb9\\x9c\\x95\\xf3\\x95\\x90\\xb3\\xf0\\x9f\\x83\\x90\", \"\\xf0\\xb1\\x93\\xae\\xf2\\xbc\\x9c\\x95\\xf3\\x9e\\x88\\x91\\xf0\\xac\\x8d\\x80\\xf3\\x83\\xb2\\x91\\xf0\\x93\\xac\\xa7\\xf1\\x9e\\x8b\\xaf\\xf2\\xba\\x9f\\xa1\\xf1\\xb7\\x87\\xbc\\xf0\\xba\\xbc\\x86\\xf2\\xb9\\xba\\xa2\\xf3\\x88\\x8e\\x80\\xf2\\xa5..., \"\\xf0\\x98\\x93\\xa8\\xf3\\x81\\xa3\\xbd\\xf1\\xa7\\xad\\xb0\\xf3\\xaf\\xa9\\xa2\\xf3\\x94\\xb9\\xb0\\xe4\\xae\\xa1\\xf2\\x87\\xb3\\x90\\xf3\\x83\\x8e\\xa0\\xf1\\x8e\\xbf\\x8d\\xf2\\x80\\x83\\x9e\\xf3\\x95\\x8d\\x9e\\xf2\\xbd\\xaa\\xba\\xf0\\xaf\\xb9..., \"\\xf0\\xbd\\x9e\\xb1\\xf1\\x8d\\xb7\\x91\", \"\\xf1\\x81\\x86\\xb4\\xf0\\xb1\\x9b\\x8c\\xf2\\xb4\\x90\\xb7\\xf1\\xa0\\x91\\xa3\\xf1\\xa1\\x9e\\xab\\xe8\\x95\\x9c\\xf1\\xaa\\xa4\\xb3\\xf2\\x9d\\x90\\x90\\xf2\\xa6\\x90\\xa1\\xf3\\x95\\xa2\\xb3\\xf2\\x9e\\xb1\\xbe\\xf2\\x8c\\xb8\\x9f\\xf3\\x9d\\x8a..., \"\\xf1\\x87\\x88\\xb5\\xf0\\xb6\\x9a\\xb6\\xf2\\xbd\\xa2\\xa6\\xf1\\xa8\\xb6\\xa9\\xf0\\x92\\x93\\x87\\xe3\\xa1\\x98\\xf0\\xaf\\xba\\xbc\\xf2\\x89\\x91\\x82\\xe6\\x86\\x8a\\xf3\\x9b\\xa9\\x86\\xf0\\xa9\\x81\\x89\\xf0\\xa0\\x8a\\xa1\\xf2\\xb5\\x82\\x87..., \"\\xeb\\x83\\xb5\\xf1\\x8a\\xb3\\x8e\\xf0\\x98\\x8e\\xaa\\xf0\\xab\\xaa\\x8c\\xf2\\x9d\\xae\\x8e\\xf1\\xac\\x8c\\xaf\\xe6\\xae\\xb7\\xe6\\x9b\\xb4\\xef\\xb1\\xb8\\xf1\\x86\\x93\\xbd\\xf2\\x8c\\x86\\x9d\\xf0\\xa7\\x83\\x9b\\xf3\\xaa\\xb4\\xb1\\xf3\\xa5..., \"\\xf1\\x8b\\xa9\\xae\\xf0\\xb7\\xad\\x85\\xf1\\x88\\x9d\\xb7\\xf3\\x85\\xa5\\xb8\\xf0\\x9d\\xa3\\x8d\\xf0\\xbc\\x8e\\x81\\xe3\\xb6\\xbe\\xf0\\x95\\x95\\x84\\xf2\\x88\\xbd\\xb1\\xf1\\xba\\xad\\x9a\\xf3\\x93\\xaf\\xaf\\xf2\\xba\\x81\\xb6\\xf0\\xb2\\x91..., \"\\xf3\\xab\\xaf\\xb0\\xf1\\xbd\\xbe\\x83\", \"\\xf3\\x98\\xbc\\x93\\xf0\\xa1\\xa4\\xa5\\xf0\\x9e\\x9f\\xaa\\xf1\\xb0\\x8e\\xa3\\xf1\\xba\\xae\\xb6\\xf1\\x8f\\xab\\x97\\xf2\\x81\\x9f\\x8f\\xf3\\xa1\\xb0\\xa1\\xf3\\x8a\\xbe\\xb8\\xf3\\xa5\\xbe\\x83\\xe2\\xb3\\x90\\xf3\\x82\\xb4\\xb2\\xf3\\x9a\\xbf..., \"\", \"\\xf1\\xaa\\x8a\\xb0\\xf0\\xa9\\x8f\\x80\\xea\\xb2\\xa0\\xf0\\x9a\\xad\\x9a\\xe8\\x8c\\xac\\xf2\\xa8\\x89\\x80\\xf3\\xae\\x82\\x80\\xf3\\x9c\\x98\\x91\\xf1\\xac\\x8a\\xb5\\xf2\\xa6\\xa6\\x9e\\xf2\\x81\\x88\\xad\\xf2\\xbb\\xbc\\xb0\\xf1\\xa3\\xa0\\xa2..., <+12>], [\"\\xf3\\x81\\x83\\xa2\\xf1\\xad\\xb0\\x82\\xf3\\x8f\\x9a\\x81\\xf1\\xae\\xb4\\xb2\\xe8\\x8b\\x83\\xf2\\x8e\\xa5\\xa2\\xf2\\x82\\xa2\\xb2\\xf1\\x90\\xa9\\x9d\\xf1\\xba\\xa3\\x8d\\xf1\\x95\\x81\\xb8\\xf1\\x98\\x99\\x8a\\xe1\\x8e\\xb1\\xf0\\x9f\\x80\\xb4..., \"\\xf0\\x9b\\x81\\x8f\\xf0\\xb5\\x98\\x98\\xf3\\x98\\x85\\xa6\\xf1\\xac\\xaf\\x8c\\xf0\\xba\\xb2\\x9c\\xf2\\xae\\x98\\x91\\xeb\\x93\\x92\\xf2\\xb8\\xa3\\xb2\\xf2\\x8a\\x8f\\x87\\xf1\\xa1\\x80\\xac\\xf0\\xa9\\xa2\\xbd\\xf1\\xac\\x81\\x97\\xf2\\x9f\\x90..., \"\\xf2\\x87\\xa2\\xac\\xf2\\xbc\\x89\\x9c\\xf0\\xa0\\x96\\x98\", \"\\xf0\\xb2\\x83\\x86\\xf2\\x91\\x83\\x9b\\xf0\\xa1\\x9c\\xb0\\xf1\\x9e\\xbb\\xba\\xf1\\x82\\xb1\\xae\\xf2\\xac\\xaf\\x8e\\xf0\\xb4\\xaf\\xac\\xf1\\x90\\xb3\\xbb\\xf2\\xaa\\x9e\\x97\\xf0\\xa3\\xb4\\x80\\xf2\\x9b\\x93\\xaa\\xe8\\xaa\\xbf\\xf1\\xb8\\xab..., \"\\xf1\\x83\\xb0\\xb6\\xe1\\xa7\\xbb\\xf2\\x96\\xb8\\x82\\xf2\\xb2\\x83\\xb6\\xf3\\x80\\xb2\\xab\\xf1\\xa4\\xbc\\xbf\\xf1\\x95\\xad\\x95\\xf2\\xac\\x91\\xb2\\xf2\\xac\\x8e\\xb1\\xf1\\x82\\x84\\xa1\\xf2\\x9b\\xb5\\x87\\xf2\\xa9\\x94\\x88\\xf0\\x9e\\x85..., \"\\xf2\\xab\\xb6\\xac\\xf2\\xa4\\x85\\x98\\xf1\\xa5\\xbe\\x8f\\xf2\\xbd\\x9f\\x91\\xf1\\x81\\xaa\\xb2\\xf3\\x81\\x82\\xaa\", \"\\xf1\\x92\\x87\\x8a\\xf3\\xa9\\x87\\x9a\\xf1\\x89\\xac\\x8f\\xec\\xa5\\x8a\\xf2\\xa7\\x9a\\xbe\\xf0\\x9a\\xa0\\xbb\\xf1\\xba\\x9a\\xb7\\xf2\\xb5\\xbd\\x9b\\xf1\\x94\\x8f\\xbe\\xf2\\xb6\\xb5\\x90\", \"\\xf2\\x90\\x91\\xbc\\xf1\\xa1\\x8b\\x8b\\xf3\\xa1\\x83\\x81\\xf1\\xb9\\xa3\\xb8\\xf3\\x90\\xbf\\x80\\xf1\\xbd\\xa9\\xb1\\xf2\\xbc\\x84\\x9c\\xf3\\x8c\\xa9\\xb2\\xf2\\xba\\x97\\xad\\xf1\\xb9\\x9b\\xb3\\xf2\\xa7\\xb8\\x95\\xf1\\xa9\\xa4\\xb0\\xf3\\x97..., \"\\xf2\\xaa\\xa9\\xa2\\xf2\\x87\\xa5\\xb0\\xf3\\x8f\\x8a\\xb1\\xf3\\xa1\\x82\\xb7\\xf2\\x84\\x86\\x9c\\xf1\\x86\\x86\\xa5\\xf0\\x9b\\x95\\xb1\\xf2\\x9d\\x93\\x94\\xf0\\xb8\\x98\\xab\\xf3\\x9e\\x9f\\xa5\\xf1\\x9d\\x8f\\xb3\\xf2\\x83\\x9d\\xb6\\xe4\\xa9...], [\"\\xf0\\xb8\\x8c\\xbc\\xf1\\x9e\\x8b\\x8a\\xf2\\x91\\x88\\x91\\xf2\\xad\\x84\\xa7\\xf2\\xa3\\x9e\\x98\\xf1\\xb3\\xae\\xbc\\xf2\\xac\\x91\\xa9\\xf3\\x94\\xa2\\x84\\xf0\\xaf\\x8d\\x91\\xf3\\x95\\xad\\x90\\xf0\\xaa\\x99\\xb3\\xf1\\x99\\x9f\\x9c\\xf0\\x9d..., \"\\xf3\\x8f\\x99\\x81\\xf2\\xb4\\xa3\\x8a\\xf3\\xa5\\x8d\\xa4\\xf3\\x92\\x99\\x82\\xf3\\x99\\xb4\\x96\\xf0\\xbb\\xa0\\x93\\xf1\\x80\\x83\\xb7\\xe1\\xb3\\xbe\\xf2\\x83\\x9f\\xa7\\xf0\\xa8\\x8e\\xae\\xf2\\xba\\xa1\\xae\\xf3\\xa7\\x9b\\x92\\xf3\\xac\\xb3...], 3458-11-15 00:00:00 GMT+0000, \"\\xf1\\x95\\x96\\x9b\\xf1\\xa0\\xbb\\xa1\", [-2716039255181611008, -2199911948767911936, -5825950594198626304, -5675255575063236608, -3698398944452395008, -5892691023134431744, -5521886244306335232, -2070603910750123008, -8386620901785604096, -8786695747253919744, -3015063915316245504, -564370744330567680, <+6>]]\n",
            "return": null,
            "summary": "<p>Randomly generates from one of the following generators:<\/p>\n<ul>\n<li><a href=\"#strings\">strings()<\/a><\/li>\n<li><a href=\"#choose\">choose()<\/a><\/li>\n<li><a href=\"#booleans\">booleans()<\/a><\/li>\n<li><a href=\"#dates\">dates()<\/a><\/li>\n<li><a href=\"#datetimes\">datetimes()<\/a><\/li>\n<li><a href=\"#listOf\">listOf(strings())<\/a><\/li>\n<li><a href=\"#listOf\">listOf(choose())<\/a><\/li>\n<\/ul>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the list of generators to be chosen from",
                    "name": "gens",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "oneof(array $gens)",
            "name": "Datashaman\\PHPCheck\\oneof",
            "href": "#oneof",
            "shortName": "oneof",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\faker;\nuse function Datashaman\\PHPCheck\\oneof;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\n\nprint repr(sample(oneof(\n    [\n        faker(\"email\"),\n        faker(\"e164PhoneNumber\")\n    ]\n))) . PHP_EOL;\n",
            "output": "[\"koepp.kennedy@langosh.info\", \"+3759665577820\", \"+9047873956857\", \"darwin66@hammes.info\", \"jwilderman@williamson.com\", \"+4067399009231\", \"merle.kreiger@gmail.com\", \"+7748101549875\", \"+7647224177252\", \"+9375842979883\", \"+6922299279264\"]\n",
            "return": null,
            "summary": "<p>Randomly uses one of the given generators. The input list must be non-empty.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the size to be used by the generator",
                    "name": "n",
                    "type": "int",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "the generator that creates the values",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "resize(int $n, \\Generator $gen)",
            "name": "Datashaman\\PHPCheck\\resize",
            "href": "#resize",
            "shortName": "resize",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\faker;\nuse function Datashaman\\PHPCheck\\listOf;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\resize;\n\nprint repr(sample(resize(3, listOf(faker(\"firstname\"))))) . PHP_EOL;\n",
            "output": "[[], [], [\"Rossie\"], [], [\"Jaydon\", \"Asha\", \"Zoila\"], [\"Johanna\"], [], [], [\"Percy\", \"Marilyne\", \"Bailey\"], [\"Genevieve\", \"Geovanni\", \"Jammie\"], [\"Monty\"]]\n",
            "return": null,
            "summary": "<p>Overrides the size parameter. Returns a generator which uses the given size instead of the runtime-size parameter.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the transform function that scales the size",
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "the generator who's size will be scaled",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "scale(callable $f, \\Generator $gen)",
            "name": "Datashaman\\PHPCheck\\scale",
            "href": "#scale",
            "shortName": "scale",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\ascii;\nuse function Datashaman\\PHPCheck\\listOf;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\scale;\nuse function Datashaman\\PHPCheck\\strings;\n\nprint repr(sample(scale(function ($n) {\n    return $n \/ 10;\n}, listOf(strings(ascii()))))) . PHP_EOL;\n",
            "output": "[[], [], [], [], [], [], [\"W-w^My<MYD1Rf9E\\$s\"], [\"FXHU#blxXr^}m.`gv^+\\\\Wi)I},\"], [\"-\"], [], [\"wOvkQX)))<VZKhTt;0X|,\", \"e^6lFO5W`2> dI*\"]]\n",
            "return": null,
            "summary": "<p>Adjust the size parameter, by transforming it with the given function.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": "null",
                    "description": null,
                    "name": "characters",
                    "type": "Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "strings(Generator $characters = null)",
            "name": "Datashaman\\PHPCheck\\strings",
            "href": "#strings",
            "shortName": "strings",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\ascii;\nuse function Datashaman\\PHPCheck\\characters;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\strings;\n\nprint repr(generate(strings())) . PHP_EOL;\nprint repr(generate(strings(ascii()))) . PHP_EOL;\nprint repr(generate(strings(characters('a', 'e')))) . PHP_EOL;\n",
            "output": "\"\\xf1\\xae\\xa6\\xb3\\xf1\\xaf\\xae\\xb7\\xf0\\xb0\\xa5\\xb2\\xf1\\xb4\\x9f\\x8b\\xf3\\x80\\x92\\xb6\\xf0\\xb7\\x93\\xbe\\xf3\\xa1\\x84\\x8a\\xf3\\xa1\\xb4\\xa4\\xf2\\xab\\xba\\xaf\\xe6\\x98\\xac\\xf2\\x89\\xad\\x84\\xf3\\x8a\\xb7\\xb5\\xf2\\x8a\\x89...\n\"?[%9?;\\$#\"\n\"bdabddba\"\n",
            "return": null,
            "summary": "<p>Generate strings, optionally from a specific character generator.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the generator that creates the values",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "the predicate function that must be satisfied",
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "suchThat(\\Generator $gen, callable $f)",
            "name": "Datashaman\\PHPCheck\\suchThat",
            "href": "#suchThat",
            "shortName": "suchThat",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\choose;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\suchThat;\n\nprint repr(sample(suchThat(choose(0, 100), function ($value) {\n    return $value < 50;\n}))) . PHP_EOL;\n",
            "output": "[41, 19, 47, 12, 20, 5, 3, 9, 38, 31, 22]\n",
            "return": null,
            "summary": "<p>Generates a value that satisfies a predicate.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the generator that creates the values",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "the map function",
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "suchThatMap(\\Generator $gen, callable $f)",
            "name": "Datashaman\\PHPCheck\\suchThatMap",
            "href": "#suchThatMap",
            "shortName": "suchThatMap",
            "description": "<p>The callable must return a Maybe object.<\/p>",
            "example": "use function Datashaman\\PHPCheck\\choose;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\suchThatMap;\nuse Datashaman\\PHPCheck\\Types\\Just;\n\nprint repr(sample(suchThatMap(choose(0, 5), function ($value) {\n    return new Just($value + 100);\n}))) . PHP_EOL;\n",
            "output": "[105, 103, 103, 104, 105, 101, 102, 104, 101, 100, 100]\n",
            "return": null,
            "summary": "<p>Generates a value for which the given function returns a Just, and then applies the function.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the generator that creates the values",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "the predicate function that must be satisfied",
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "suchThatMaybe(\\Generator $gen, callable $f)",
            "name": "Datashaman\\PHPCheck\\suchThatMaybe",
            "href": "#suchThatMaybe",
            "shortName": "suchThatMaybe",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\choose;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\suchThatMaybe;\n\nprint repr(sample(suchThatMaybe(choose(0, 100), function ($value) {\n    return $value < 99;\n}))) . PHP_EOL;\n\nprint repr(sample(suchThatMaybe(choose(0, 100), function ($value) {\n    return $value > 99;\n}))) . PHP_EOL;\n",
            "output": "[<Just 9>, <Just 45>, <Just 0>, <Just 32>, <Just 24>, <Just 71>, <Just 2>, <Just 4>, <Just 46>, <Just 86>, <Just 96>]\n[<Nothing>, <Nothing>, <Nothing>, <Nothing>, <Nothing>, <Nothing>, <Nothing>, <Nothing>, <Nothing>, <Nothing>, <Nothing>]\n",
            "return": null,
            "summary": "<p>Tries to generate a value that satisfies a predicate. If it fails to do so after enough attempts, returns Nothing.<\/p>"
        },
        {
            "arguments": [],
            "file": "generators",
            "header": "timezones()",
            "name": "Datashaman\\PHPCheck\\timezones",
            "href": "#timezones",
            "shortName": "timezones",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\timezones;\n\nprint repr(generate(timezones())) . PHP_EOL;\n",
            "output": "\"America\/Aruba\"\n",
            "return": null,
            "summary": "<p>Generate a timezone.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the seed to be used by the generator",
                    "name": "seed",
                    "type": "string",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "the generator to be seeded",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "variant(string $seed, \\Generator $gen)",
            "name": "Datashaman\\PHPCheck\\variant",
            "href": "#variant",
            "shortName": "variant",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\ascii;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\strings;\nuse function Datashaman\\PHPCheck\\variant;\n\nprint repr(sample(variant(\"123\", strings(ascii())))) . PHP_EOL;\n",
            "output": "[\"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\", \"J5k\\\"7J8WMF1jTQ4\\\"Nouq>3A_xI\"]\n",
            "return": null,
            "summary": "<p>Modifies a generator using an integer seed so it will always produce the same result.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "the length of the list to be generated",
                    "name": "n",
                    "type": "int",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "the generator that produces the values",
                    "name": "gen",
                    "type": "\\Generator",
                    "variadic": false
                }
            ],
            "file": "generators",
            "header": "vectorOf(int $n, \\Generator $gen)",
            "name": "Datashaman\\PHPCheck\\vectorOf",
            "href": "#vectorOf",
            "shortName": "vectorOf",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\choose;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\vectorOf;\n\nprint repr(generate(vectorOf(5, choose(0, 10)))) . PHP_EOL;\n",
            "output": "[8, 7, 6, 10, 2]\n",
            "return": null,
            "summary": "<p>Generates a list of the given length.<\/p>"
        }
    ],
    "helpers": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "gen",
                    "type": "Generator",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": null,
                    "name": "r",
                    "type": "Datashaman\\PHPCheck\\Random",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": null,
                    "name": "n",
                    "type": "int",
                    "variadic": false
                }
            ],
            "file": "helpers",
            "header": "generate(Generator $gen, Datashaman\\PHPCheck\\Random $r = null, int $n = null)",
            "name": "Datashaman\\PHPCheck\\generate",
            "href": "#generate",
            "shortName": "generate",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\ascii;\nuse function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\strings;\nuse function Datashaman\\PHPCheck\\choose;\n\n\/\/ Generate an integer from 0 to 10.\necho generate(choose(0, 10)) . PHP_EOL;\n\n\/\/ Generate an ASCII string.\necho generate(strings(ascii())) . PHP_EOL;\n",
            "output": "7\nOg#'51<-yS4J7F%S3\n",
            "return": null,
            "summary": "<p>Run a generator.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "a callable function that returns a value, should accept (Random $r = null, int $n = null), and should pass $r into any generate calls within its body",
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                }
            ],
            "file": "helpers",
            "header": "makeGen(callable $f)",
            "name": "Datashaman\\PHPCheck\\makeGen",
            "href": "#makeGen",
            "shortName": "makeGen",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\generate;\nuse function Datashaman\\PHPCheck\\makeGen;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse Datashaman\\PHPCheck\\Random;\n\n\/\/ Make a generator that returns a random value from 0 to 9.\n$genA = makeGen(function (Random $r, int $n = null) {\n    return $r->random(0, 9);\n});\n\n\/\/ Generate some integers.\nprint repr(sample($genA)) . PHP_EOL;\n\n\/\/ Make another generator that uses $genA to return a character.\n\/\/ The Random object $r is passed to the generate call.\n$genB = makeGen(function (Random $r, int $n = null) use ($genA) {\n    $index = generate($genA, $r);\n\n    return chr($index + 97);\n});\n\n\/\/ Generate some characters.\nprint repr(sample($genB)) . PHP_EOL;\n",
            "output": "[8, 6, 9, 1, 8, 3, 8, 3, 7, 2, 9]\n[\"a\", \"g\", \"g\", \"d\", \"i\", \"j\", \"j\", \"g\", \"f\", \"h\", \"b\"]\n",
            "return": null,
            "summary": "<p>Make a generator from a callable function.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "The property function (or check).",
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": "Stream for the quickCheck output. Defaults to <code>stdout<\/code>.",
                    "name": "output",
                    "type": "null|resource",
                    "variadic": false
                }
            ],
            "file": "helpers",
            "header": "quickCheck(callable $f, $output = null)",
            "name": "Datashaman\\PHPCheck\\quickCheck",
            "href": "#quickCheck",
            "shortName": "quickCheck",
            "description": "<p>A property function (or check) must return a boolean result.<\/p>",
            "example": "use function Datashaman\\PHPCheck\\quickCheck;\n\n\/**\n * @param string $email {@gen faker('email')}\n *\/\nfunction checkEmails(string $email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n\nquickCheck('checkEmails');\n\n\/**\n * @param int $i {@gen choose(1, 10)}\n *\/\nfunction checkIntegers(int $i) {\n    return is_int($i) && $i >= 1 && $i <= 10;\n}\n\nquickCheck('checkIntegers');\n",
            "output": "PHPCheck 0.1.0 by Marlin Forbes and contributors.\n\n.\n\n1 \/ 1 (100%)\n\nTime: 32 ms, Memory: 8.00 MB\n\nOK (Checks: 1, Iterations: 100, Failures: 0, Errors: 0)\nPHPCheck 0.1.0 by Marlin Forbes and contributors.\n\n.\n\n1 \/ 1 (100%)\n\nTime: 8 ms, Memory: 8.00 MB\n\nOK (Checks: 1, Iterations: 100, Failures: 0, Errors: 0)\n",
            "return": null,
            "summary": "<p>Checks that a so-called property function (or check) holds true for all arguments given.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "gen",
                    "type": "Generator",
                    "variadic": false
                }
            ],
            "file": "helpers",
            "header": "sample(Generator $gen)",
            "name": "Datashaman\\PHPCheck\\sample",
            "href": "#sample",
            "shortName": "sample",
            "description": "",
            "example": "use function Datashaman\\PHPCheck\\ascii;\nuse function Datashaman\\PHPCheck\\repr;\nuse function Datashaman\\PHPCheck\\sample;\nuse function Datashaman\\PHPCheck\\strings;\n\nprint repr(sample(strings(ascii()))) . PHP_EOL;\n",
            "output": "[\"\", \"WE\", \"PYZ\", \"-xL#X\", \"v-}Q\", \"\", \"?[)p5\", \"[\\\\1Ay<=Yc\", \"vnB0=|A|\", \"#pG|y6fh\", \"+wI_-\"]\n",
            "return": null,
            "summary": "<p>Generates some example values in increasingly random size.<\/p>"
        }
    ]
}